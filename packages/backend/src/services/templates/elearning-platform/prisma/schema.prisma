// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  ownedCourses  Course[]  @relation("CourseInstructor")
  enrollments   Enrollment[]
  progress      Progress[]
  quizAttempts  QuizAttempt[]
  discussions   Discussion[]
  certificates  Certificate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]
}

model Course {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.Text
  thumbnail    String?
  price        Float      @default(0)
  level        Level      @default(BEGINNER)
  duration     Int        // in minutes
  published    Boolean    @default(false)
  featured     Boolean    @default(false)
  slug         String     @unique
  requirements String[]
  learnings    String[]   // What students will learn
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  instructorId String
  instructor   User       @relation("CourseInstructor", fields: [instructorId], references: [id])
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])

  modules      Module[]
  enrollments  Enrollment[]
  reviews      Review[]
  certificates Certificate[]
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  duration    Int      // in minutes
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons    Lesson[]
  quizzes    Quiz[]
  progress   Progress[]
  discussions Discussion[]
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String     @db.Text // Rich text content
  type        LessonType @default(VIDEO)
  videoUrl    String?
  duration    Int        // in seconds
  order       Int
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  progress Progress[]
  resources Resource[]
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  ASSIGNMENT
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String
  size        Int?         // in bytes
  createdAt   DateTime     @default(now())

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

enum ResourceType {
  PDF
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
  LINK
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int?     // in minutes, null for unlimited
  passingScore Int     @default(70) // percentage
  maxAttempts Int      @default(3)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  questions Question[]
  attempts  QuizAttempt[]
}

model Question {
  id          String       @id @default(cuid())
  question    String       @db.Text
  type        QuestionType @default(MULTIPLE_CHOICE)
  options     String[]     // JSON array of options
  correctAnswer String     // For multiple choice, this is the index; for text, the answer
  explanation String?      @db.Text
  points      Int          @default(1)
  order       Int
  createdAt   DateTime     @default(now())

  quizId String
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  answers Answer[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Float    // percentage
  passed      Boolean
  timeSpent   Int      // in seconds
  startedAt   DateTime
  completedAt DateTime?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  answers Answer[]
}

model Answer {
  id        String   @id @default(cuid())
  answer    String   // Student's answer
  isCorrect Boolean
  points    Int      @default(0)
  createdAt DateTime @default(now())

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id           String           @id @default(cuid())
  status       EnrollmentStatus @default(ACTIVE)
  progress     Float            @default(0) // percentage completed
  enrolledAt   DateTime         @default(now())
  completedAt  DateTime?
  lastAccessAt DateTime?

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
}

model Progress {
  id           String   @id @default(cuid())
  completed    Boolean  @default(false)
  timeSpent    Int      @default(0) // in seconds
  lastAccessAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId String?
  module   Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessonId String?
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@unique([userId, lessonId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  helpful   Int      @default(0) // number of helpful votes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Discussion {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  pinned      Boolean  @default(false)
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  replies Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId     String
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
}

model Certificate {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  issuedAt    DateTime @default(now())
  validUntil  DateTime?

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}