name: Deploy to Staging

on:
  push:
    branches: [develop, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:3001' }}

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    environment: 
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            # Navigate to deployment directory
            cd ${{ secrets.DEPLOYMENT_PATH || '/opt/swistack' }}
            
            # Pull latest images
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            
            # Update docker-compose with new image tags
            export BACKEND_IMAGE="${{ needs.build-and-push.outputs.backend-image }}"
            export FRONTEND_IMAGE="${{ needs.build-and-push.outputs.frontend-image }}"
            
            # Create staging environment file
            cat > .env.staging << EOF
            NODE_ENV=staging
            PORT=3001
            
            # Database Configuration (using production secrets for testing)
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            
            # Redis Configuration
            REDIS_URL=${{ secrets.REDIS_URL }}
            
            # Authentication
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }}
            
            # MinIO/S3 Configuration
            MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }}
            MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
            MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
            MINIO_BUCKET=${{ secrets.MINIO_BUCKET }}
            
            # API URLs
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            
            # Other Configuration
            CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            EOF
            
            # Deploy with docker-compose
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d --remove-orphans
            
            # Run database migrations
            docker-compose -f docker-compose.staging.yml exec -T backend npm run migrate:latest
            
            # Health check
            echo "Waiting for services to be healthy..."
            sleep 30
            
            # Check backend health
            curl -f http://localhost:3001/health || exit 1
            
            # Check frontend health
            curl -f http://localhost:3000 || exit 1
            
            echo "Staging deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Notify Success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "✅ Staging deployment successful!"
          echo "Backend: ${{ needs.build-and-push.outputs.backend-image }}"
          echo "Frontend: ${{ needs.build-and-push.outputs.frontend-image }}"

      - name: Notify Failure  
        if: ${{ needs.deploy.result == 'failure' || needs.build-and-push.result == 'failure' || needs.test.result == 'failure' }}
        run: |
          echo "❌ Staging deployment failed!"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build-and-push.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          exit 1