# Multi-stage build for production-optimized backend
FROM node:18-alpine AS base
WORKDIR /app

# Install system dependencies for Docker and native modules
RUN apk add --no-cache \
    docker-cli \
    docker-compose \
    python3 \
    make \
    g++ \
    curl \
    git \
    openssh-client

# Install dependencies
FROM base AS dependencies
COPY package*.json ./
COPY packages/backend/package*.json ./packages/backend/
COPY packages/shared/package*.json ./packages/shared/
RUN npm ci --only=production --workspace=packages/backend --workspace=packages/shared

# Build the application
FROM base AS build
COPY package*.json ./
COPY packages/backend/package*.json ./packages/backend/
COPY packages/shared/package*.json ./packages/shared/
RUN npm ci --workspace=packages/backend --workspace=packages/shared

COPY packages/shared ./packages/shared
COPY packages/backend ./packages/backend

# Build shared package first
RUN npm run build --workspace=packages/shared

# Build backend (TypeScript compilation)
RUN npm run build --workspace=packages/backend

# Production image
FROM base AS runtime
WORKDIR /app

# Add non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nodejs nodejs

# Copy built application and dependencies
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=build /app/packages/backend/dist ./packages/backend/dist
COPY --from=build /app/packages/backend/package*.json ./packages/backend/
COPY --from=build /app/packages/shared/dist ./packages/shared/dist
COPY --from=build /app/packages/shared/package*.json ./packages/shared/

# Copy necessary runtime files
COPY packages/backend/src/migrations ./packages/backend/src/migrations
COPY packages/backend/src/seeds ./packages/backend/src/seeds

# Create necessary directories
RUN mkdir -p /tmp/swistack-containers \
    && mkdir -p /app/uploads \
    && chown -R nodejs:nodejs /app \
    && chown -R nodejs:nodejs /tmp/swistack-containers

# Add user to docker group for container management
RUN addgroup nodejs docker

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Start the application
WORKDIR /app/packages/backend
CMD ["node", "dist/server.js"]