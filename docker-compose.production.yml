version: '3.8'

services:
  # Main application services
  nginx:
    image: nginx:alpine
    container_name: swistack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - swistack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile.production
    container_name: swistack-frontend
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.swistack.dev
      - NEXT_PUBLIC_WS_URL=wss://api.swistack.dev
    volumes:
      - frontend-cache:/app/.next/cache
    networks:
      - swistack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile.production
    container_name: swistack-backend
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://swistack:${DB_PASSWORD}@postgres:5432/swistack
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - BASE_DOMAIN=swistack.dev
      - SSL_ENABLED=true
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - backend-uploads:/app/uploads
      - container-workspaces:/tmp/swistack-containers
    networks:
      - swistack-network
    depends_on:
      - postgres
      - redis
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database services
  postgres:
    image: postgres:15-alpine
    container_name: swistack-postgres
    environment:
      - POSTGRES_DB=swistack
      - POSTGRES_USER=swistack
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - swistack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swistack"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: swistack-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - swistack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Storage service
  minio:
    image: minio/minio:latest
    container_name: swistack-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio-data:/data
    networks:
      - swistack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: swistack-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - swistack-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: swistack-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.swistack.dev
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - swistack-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: swistack-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - swistack-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: swistack-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx-logs:/var/log/nginx:ro
    networks:
      - swistack-network
    depends_on:
      - loki
    restart: unless-stopped

  # Container orchestration for user projects
  docker-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: swistack-docker-proxy
    environment:
      - CONTAINERS=1
      - IMAGES=1
      - NETWORKS=1
      - VOLUMES=1
      - BUILD=1
      - POST=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - swistack-network
    restart: unless-stopped

  # Resource monitoring and cleanup
  container-monitor:
    build:
      context: ./monitoring/container-monitor
    container_name: swistack-container-monitor
    environment:
      - DOCKER_HOST=tcp://docker-proxy:2375
      - CLEANUP_INTERVAL=300 # 5 minutes
      - MAX_CONTAINER_AGE=3600 # 1 hour
      - MAX_MEMORY_USAGE=512 # MB
      - MAX_CPU_USAGE=50 # percentage
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - swistack-network
    depends_on:
      - docker-proxy
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-logs:
    driver: local
  frontend-cache:
    driver: local
  backend-uploads:
    driver: local
  container-workspaces:
    driver: local

networks:
  swistack-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16